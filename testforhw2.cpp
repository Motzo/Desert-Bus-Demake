//Desert Bus C++ Console Port 
#include <iostream>
#include <string>
#include <ctime>
#include <iomanip>
#include <windows.h>
#include <conio.h>
#include "CXBOXController.h"
#include "Bus.h"
#include <chrono>
#include <thread>
#include <fstream>
#include <atomic>

#pragma comment(lib, "XInput.lib")



//Setting this down for now 8/11/2024









using namespace std; 


//important variables
const int NAME_SIZE = 13; 
const int OFFROADTOTAL = 3;
int x, y; 
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir; 
bool gameOver; 


  // Colors using ANSI escape codes
    const std::string RESET = "\033[0m";
    const std::string RED = "\033[31m";
    const std::string GREEN = "\033[32m";
    const std::string YELLOW = "\033[33m";
    const std::string BLUE = "\033[34m";
    const std::string MAGENTA = "\033[35m";
    const std::string CYAN = "\033[36m";
    const std::string WHITE = "\033[37m";
    const std::string BRIGHT_RED = "\033[91m";
    const std::string BRIGHT_GREEN = "\033[92m";
    const std::string BRIGHT_YELLOW = "\033[93m";
    const std::string BRIGHT_BLUE = "\033[94m";
    const std::string BRIGHT_MAGENTA = "\033[95m";
    const std::string BRIGHT_CYAN = "\033[96m";
    const std::string BRIGHT_WHITE = "\033[97m";
	const std::string BACKGROUND_YELLOW = "\033[43m";
    const std::string BACKGROUND_MAGENTA = "\033[45m";
    const std::string BACKGROUND_CYAN = "\033[46m";
    const std::string BACKGROUND_WHITE = "\033[47m";
    const std::string BACKGROUND_BRIGHT_RED = "\033[101m";
    const std::string BACKGROUND_BRIGHT_GREEN = "\033[102m";
    const std::string BACKGROUND_BRIGHT_YELLOW = "\033[103m";
    const std::string BACKGROUND_BRIGHT_BLUE = "\033[104m";
    const std::string BACKGROUND_BRIGHT_MAGENTA = "\033[105m";
    const std::string BACKGROUND_BRIGHT_CYAN = "\033[106m";
    const std::string BACKGROUND_BRIGHT_WHITE = "\033[107m";


//functions for game graphics and such
void draw(string playerName); 
//for when the bus goes off road
bool offRoad(); 
//displays how to play/warnings
//void instructions(); 
void clear(); 
//grabs the title screen, quits if player chooses to
bool titleScreen(CXBOXController* player);
//the scores
//void displayLeaderBoard(string playerName);
bool gameOverScreen(CXBOXController* player);
//might delete this
void Input();
void wait(int milliseconds);
int menu(CXBOXController* player);
//grabs the name from the user for the leaderboard
void createName(string &playerName); 
//credits
void credits(); 

void instructions(); 

//displays when the eight hours are up 
bool winscreen(); 

void updates(); 

void leaderBoard(int point, string name);

//, leaderboard
//Add instructions, credits
//add offroading


atomic<bool> paused(false);
atomic<bool> running(true);



CXBOXController* player;
int main(int argc, char* argv[])
{
	//object of the xbox controller class
	player = new CXBOXController(1); 
	int points = 0; 
	int milesDriven = 0;
	int menuChoice; 
	bool gameStatus; 
	bool gameOverStatus = false; 
	string playerName; 


	const int total = 8; // Running total
	auto start = std::chrono::steady_clock::now();

	
	leaderBoard(points, playerName);
	
	

	//implement check to see if name entered 
	//is less than a certain amount of characters
	//I don't wanna mess with setw

	gameStatus = titleScreen(player);

	//Goes to the menu 
	if (gameStatus == true) 
	{



		clear(); 
		if (player->IsConnected()) 
		{
			cout << "Controller connected..." << endl; 
			player->Vibrate(65535, 65535);
			wait(2000);
			player->Vibrate(); 
		}
		else 
		{
			cout << "NOT CONNECTED" << endl; 
			wait(2000);
		}

		

		menuChoice = menu(player); 

		switch (menuChoice) 
		{
		case 1: 
			createName(playerName);
			while (gameOverStatus == false) 
			{
				if (_kbhit()) 
				{
					switch (_getch())
					{
					case 'w':
						//This draws the bus moving, while continously checking to see if 8 hours have passed
						draw(playerName);

						if (!paused)
						{

						
							auto now = std::chrono::steady_clock::now();

							// Calculate the elapsed time in hours

							std::chrono::duration<double> elapsed = now - start;
							int hoursElapsed = static_cast<int>(elapsed.count() / 3600); // convert seconds to hours

							

							if (hoursElapsed > total)
							{ // If an hour has passed
								bool result = winscreen(); 

								if (result == false) 
								{
									gameStatus = true;
									points++; 
									break;								
								}
								

								
							}

						}

						
					default: 
						//what displays when nothing is pressed
						cout << "########################################################%%%%%%%%%%########%%%%%%%%%%################" << endl;
						cout << "********%%%%%%%%%%%%*%%%%%%%%%%%%%%%%%%%%%#*%%%%%%%%%%%*%@@@@@@@@@@%****#@@%@@@@@@@@***************#" << endl;
						cout << "++++++#*%%%%%%%%%%%%*%%%%%%%%%%%%%%%%%%%%%%*%%%%%%%%%%@#%@@%%@%#@@@@@@%@@@@@%%@@%@%%########*#####*#" << endl;
						cout << "@@#+=+=+%%%%%%%%%%*+***%##%%*##%#%##*%*%#+*#*%%%%%%%%%%=#@@%@%#@@@@@@@@@@@@@@%%@@%@%++===========++#" << endl;
						cout << "*=======#%%%%%%%%%#+++++++++++++++++++++++++*%%%%%%%%%#=#@%@@%@@@@@@@@@@@@@@@@@%@%@%+=============+#" << endl;
						cout << "========#%%%%%%%%%#+++++++++++++++++++++++++*%%%%%%%%%#=#@%%%%@@@@@@@@@@@@@@@@@#%%%%+=============+#" << endl;
						cout << "========*%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%#*=#@@@@@@%@@@@@@@@@@@@%@@@@@@@+=============+#" << endl;
						cout << "========+#############################################*======#%@+++#*+++==++=======+=============++#" << endl;
						cout << "=============================================================#%@=+*%#++==========================++#" << endl;
						cout << "=============================================================#*%+**%%*+=================+========++#" << endl;
						cout << "+================================++++==============+++#++===+#*%+##%%%+=========================+++#" << endl;
						cout << "++++++++++++++++++++++++++++++++++***+++++++++++++++++@*+++++#*@+++%#++++++++++++++++++++++++++++++#" << endl;
						cout << "+++++++++++++++++++++++++++++*#*********++++++++++++++%#+++++#*%+++++++++++++++++++++++++++++++++++#" << endl;
						cout << "+++++++++++++++++++++++*###******=******###**+++++++++#%+++++#*%++++++*@+++++++++++++++++++++++++++#" << endl;
						cout << "+++++++++++++++++**#####******************#####**++++++@*++++#*%++++++#%+++++++++++++++++++++++++++#" << endl;
						cout << "+++++++++++***#**#*************=+************###**#*+++%*++++#*%+++++*%*+++++++++++++++++++++++++++#" << endl;
						cout << "++++++*####*####**************+=****************#######%#++++#*%+++++*@++++++++++++++++++*+++++++++#" << endl;
						cout << "#*###*##*##**************************************######%%%@%#%*%**+++#%+++++*+++++**++++++++**+++++#" << endl;
						cout << "######**********************************************##*%@*%#*%*@*+++*%*+*++++++++++++++++++++++++++#" << endl;
						cout << "*###************************==***********************###@###*%*%##**#@+++++++++++++++++*+++*+**++++#" << endl;
						cout << "***************************=-**********************##**#%%###%*@#%%%%%##**+++++++++++++++++++++++++#" << endl;
						cout << "**************************************************#**#**#%***%*%#*##%%%***+*****+++*+++++++++++++++#" << endl;
						cout << "************************************************#**##****@#**%*%***#%#**#***#*****+++++++++++++++++#" << endl;
						cout << "**********************************************##*##******%%#*%*%####@######**###**###**++++++++++++#" << endl;
						cout << "***********************=--+******************#**%********#%#*%*@*##%%#######**#*##******+**++++++++#" << endl;
						cout << "**********************+--+*****************#**#**********#%#*%*@##*%%****#####*#**#*####*#*#**+**+*#" << endl;
						cout << "***************#######*+*#####*#*********##*##************%**%*@**#@###***######*#*##**#######****+#" << endl;
						cout << "*******#%@@%@@@@@@@@@@@@@@@@@@@@@@%@%%###**#*****************%*@**#%***###**##**%*#####****#########" << endl;
						cout << "**#%@@@@@@@@@@@@@%===++++==+%@@@@@@@@@@@@%%******************%*%**%%******####*-=+#**#######*#*#####" << endl;
						cout << "@@@@@@@@@@@@@%++*#%@@@%@@@@@#*=*@@@@@@@@@@@@@%***************%*@**************%*+#**#****##**#**##*#" << endl;
						cout << "@@@@@@@@@@@#+#@*@@@@@@@@@@@@@@@@*+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%***@@@@@@@@@@@@@@@@@#" << endl;
						cout << "@@@@@@%%%#+#@@@#*%@@%@%%@@@@@@@##%#+%@@@%@@@@@@@%%%%%%@%%%%%%%%%@@@@@@@@@@@@@@#==+%@@@@@@@@@@@@@@@@#" << endl;
						cout << "@@@@@@@@**@@@%@@%*%%@@@@@@@@@%@@@@@@**@@@@@@@@@@%%%@%#+%#@%#%%*#%%@@@@@@@%@@@@%#*#@@@@%@@@@@@@@@@@@#" << endl;
						cout << "@@@@@@+#@@@@@@@@#*%@@@@@@@@%@@@@@@*%#+@@@@@@@@@%#%@%%@%%@%%%%::%%@@@@@@@@@@@%*=:=%@@@@@@@@@@@@@@@@#" << endl;
						cout << "@@@@@@**%%@@@@@@@@#*@@%@@@@@@*#@@@@@@@**@@@@@@@%%@@%@@@@@@@@@@@@@@@@@@@@@%@@@%@@@@@@@@@@@@@@@@@@@@@#" << endl;
						cout << "%%@@@%*@##%#%@%#*#%**%%@@@@@@%@@@@@@@@@+@@@@@@@%@@%@%@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
						cout << "%@@@@+#@@@@@@%@@@@@@***#@@@@@@@@@@@@##%#+@@@@@@@%@+%@@@=%@@%+%@@@@@@@@@@@@@@@@@@@@@@@%#@@@@@@@@@@@@#" << endl;
						cout << "@@@@%+%@%@@@%@@@@@@@##**##@@@%@*#@@@@@%%+@@@@@@@@%%#@@@##@@@#*@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%@#" << endl;
						cout << "@@@@%+@@@@@@@@@@@@@##@%@@##++++*+++++%%%+@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
						cout << "%@@@%+@@@@%@@@@@@@@##@@@@#%%%%%@@@@@@@@@+@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;


					}
				}
				
			} 
			break; 
		case 2: 
			//instructions(); 
			cin.get(); 
			cin.ignore();
			clear(); 
			break; 
	
		}
	
	}
	//quits if not
	else 
	{
		clear(); 
	}






	delete player; 
	return 0;
}

void draw(string playerName)
{ 
	


	clear(); 
	//should at least get rid of the cursor. No clue yet how to handle 
	//the flickering. 
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 0,0 });
	CONSOLE_CURSOR_INFO info;

	info.dwSize = 100;

	info.bVisible = false;

	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info);
	//first iteration of road
	cout << "########################################################%%%%%%%%%%########%%%%%%%%%%################" << endl;
	cout << "********%%%%%%%%%%%%*%%%%%%%%%%%%%%%%%%%%%#*%%%%%%%%%%%*%@@@@@@@@@@%****#@@%@@@@@@@@***************#" << endl;
	cout << "++++++#*%%%%%%%%%%%%*%%%%%%%%%%%%%%%%%%%%%%*%%%%%%%%%%@#%@@%%@%#@@@@@@%@@@@@%%@@%@%%########*#####*#" << endl;
	cout << "@@#+=+=+%%%%%%%%%%*+***%##%%*##%#%##*%*%#+*#*%%%%%%%%%%=#@@%@%#@@@@@@@@@@@@@@%%@@%@%++===========++#" << endl;
	cout << "*=======#%%%%%%%%%#+++++++++++++++++++++++++*%%%%%%%%%#=#@%@@%@@@@@@@@@@@@@@@@@%@%@%+=============+#" << endl;
	cout << "========#%%%%%%%%%#+++++++++++++++++++++++++*%%%%%%%%%#=#@%%%%@@@@@@@@@@@@@@@@@#%%%%+=============+#" << endl;
	cout << "========*%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%#*=#@@@@@@%@@@@@@@@@@@@%@@@@@@@+=============+#" << endl;
	cout << "========+#############################################*======#%@+++#*+++==++=======+=============++#" << endl;
	cout << "=============================================================#%@=+*%#++==========================++#" << endl;
	cout << "=============================================================#*%+**%%*+=================+========++#" << endl;
	cout << "+================================++++==============+++#++===+#*%+##%%%+=========================+++#" << endl;
	cout << "++++++++++++++++++++++++++++++++++***+++++++++++++++++@*+++++#*@+++%#++++++++++++++++++++++++++++++#" << endl;
	cout << "+++++++++++++++++++++++++++++*#*********++++++++++++++%#+++++#*%+++++++++++++++++++++++++++++++++++#" << endl;
	cout << "+++++++++++++++++++++++*###******=******###**+++++++++#%+++++#*%++++++*@+++++++++++++++++++++++++++#" << endl;
	cout << "+++++++++++++++++**#####******************#####**++++++@*++++#*%++++++#%+++++++++++++++++++++++++++#" << endl;
	cout << "+++++++++++***#**#*************=+************###**#*+++%*++++#*%+++++*%*+++++++++++++++++++++++++++#" << endl;
	cout << "++++++*####*####**************+=****************#######%#++++#*%+++++*@++++++++++++++++++*+++++++++#" << endl;
	cout << "#*###*##*##**************************************######%%%@%#%*%**+++#%+++++*+++++**++++++++**+++++#" << endl;
	cout << "######**********************************************##*%@*%#*%*@*+++*%*+*++++++++++++++++++++++++++#" << endl;
	cout << "*###************************==***********************###@###*%*%##**#@+++++++++++++++++*+++*+**++++#" << endl;
	cout << "***************************=-**********************##**#%%###%*@#%%%%%##**+++++++++++++++++++++++++#" << endl;
	cout << "**************************************************#**#**#%***%*%#*##%%%***+*****+++*+++++++++++++++#" << endl;
	cout << "************************************************#**##****@#**%*%***#%#**#***#*****+++++++++++++++++#" << endl;
	cout << "**********************************************##*##******%%#*%*%####@######**###**###**++++++++++++#" << endl;
	cout << "***********************=--+******************#**%********#%#*%*@*##%%#######**#*##******+**++++++++#" << endl;
	cout << "**********************+--+*****************#**#**********#%#*%*@##*%%****#####*#**#*####*#*#**+**+*#" << endl;
	cout << "***************#######*+*#####*#*********##*##************%**%*@**#@###***######*#*##**#######****+#" << endl;
	cout << "*******#%@@%@@@@@@@@@@@@@@@@@@@@@@%@%%###**#*****************%*@**#%***###**##**%*#####****#########" << endl;
	cout << "**#%@@@@@@@@@@@@@%===++++==+%@@@@@@@@@@@@%%******************%*%**%%******####*-=+#**#######*#*#####" << endl;
	cout << "@@@@@@@@@@@@@%++*#%@@@%@@@@@#*=*@@@@@@@@@@@@@%***************%*@**************%*+#**#****##**#**##*#" << endl;
	cout << "@@@@@@@@@@@#+#@*@@@@@@@@@@@@@@@@*+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%***@@@@@@@@@@@@@@@@@#" << endl;
	cout << "@@@@@@%%%#+#@@@#*%@@%@%%@@@@@@@##%#+%@@@%@@@@@@@%%%%%%@%%%%%%%%%@@@@@@@@@@@@@@#==+%@@@@@@@@@@@@@@@@#" << endl;
	cout << "@@@@@@@@**@@@%@@%*%%@@@@@@@@@%@@@@@@**@@@@@@@@@@%%%@%#+%#@%#%%*#%%@@@@@@@%@@@@%#*#@@@@%@@@@@@@@@@@@#" << endl;
	cout << "@@@@@@+#@@@@@@@@#*%@@@@@@@@%@@@@@@*%#+@@@@@@@@@%#%@%%@%%@%%%%::%%@@@@@@@@@@@%*=:=%@@@@@@@@@@@@@@@@#" << endl;
	cout << "@@@@@@**%%@@@@@@@@#*@@%@@@@@@*#@@@@@@@**@@@@@@@%%@@%@@@@@@@@@@@@@@@@@@@@@%@@@%@@@@@@@@@@@@@@@@@@@@@#" << endl;
	cout << "%%@@@%*@##%#%@%#*#%**%%@@@@@@%@@@@@@@@@+@@@@@@@%@@%@%@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
	cout << "%@@@@+#@@@@@@%@@@@@@***#@@@@@@@@@@@@##%#+@@@@@@@%@+%@@@=%@@%+%@@@@@@@@@@@@@@@@@@@@@@@%#@@@@@@@@@@@@#" << endl;
	cout << "@@@@%+%@%@@@%@@@@@@@##**##@@@%@*#@@@@@%%+@@@@@@@@%%#@@@##@@@#*@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%@#" << endl;
	cout << "@@@@%+@@@@@@@@@@@@@##@%@@##++++*+++++%%%+@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
	cout << "%@@@%+@@@@%@@@@@@@@##@@@@#%%%%%@@@@@@@@@+@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
	
	wait(125); 
	//should at least get rid of the cursor. No clue yet how to handle 
	//the flickering. 
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 0,0 });


	info.dwSize = 100;

	info.bVisible = false;

	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info);
	clear(); 
	//first iteration of road
	cout << "%%%%%##%%##%%##%%##%%##%%##%%##%%##%%##%%##%%###%##%%###%###%%%@@@@%%%%###*+**###%%%%@@@@%%#%%##%%##" << endl;
	cout << "#*****+##**************************************+*************@%%%%%%%@@@@+*****@@@@%%%%%%@%*********" << endl;
	cout << "++++++=#=*%%%%%%%%%%%%@+%%%%%%%%%%%%%%%%%%%%%%@*%%%%%%%%%%%%+@@@@@@@@@%%%@%**%@#%%@@@@@@@@%+++++++++" << endl;
	cout << "==*@@@++++%%%%%%%%%%%+++*+**+**+*****++***++*+++#%%%%%%%%%%@+%%%%%%%%%%@@@@%%@@@%%%%%%%%%%%+++++++++" << endl;
	cout << "@@========%%%%%%%%%%%*+++*#%%*++#%###++%##++%+++%%%%%%%%%%%==%%#%%#%%%%@@@@@@@@@@%%%##%%#%#=========" << endl;
	cout << "@=========%%%%%%%%%%%++++++@%+@+%++*@++++++++++++%%%%%%%%%#==@%%%%%%%%%#@@@@@@@@#%%%%%%%%@#=========" << endl;
	cout << "==========*%%%%%%%%%%*++++++++++*@#+++++++++++++#%%%%%%%%%*==@%%##%%%%%@@@@@@@@@@@%%%%##%%#=========" << endl;
	cout << "==========*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*===%@@@%%%%%##**+***##%%%%%@@@%==========" << endl;
	cout << "==================================================================+%%===%%*=========================" << endl;
	cout << "==================================================================+%%==+%%%+========================" << endl;
	cout << "------------------------------------------------------------------=**--*%%%=------------------------------------------------------------------------------------------------------------------	" << endl;
	cout << "==================================+****+==================%%======+**==*%%#+========================" << endl;
	cout << "============================+******=****#**+==+===========+#======+**====+============+=============" << endl;
	cout << "==============+======+**#*********************++===========@+=====+**======+========================" << endl;
	cout << "=====+++======++***###**********-+****************+========@%=====+**=======%%====================+=" << endl;
	cout << "========+**#*##******************************#***#****+=+==+#=====+**=======%=======+===========+==" << endl;
	cout << "+=+****##***********************************************#+++@+====+**+++===+@=====+=========+======+" << endl;
	cout << "##*#*##*********************-=**********************+#****#*@#+=+*+**======%#+======+++++===+=+++===" << endl;
	cout << "**#***********************=-***************************#****%%#@#++**===+==%++======+=========+=+===" << endl;
	cout << "*******************************************************##*#+%#*#**#**+++==+@====+===+==+++==+++++===" << endl;
	cout << "*******************************************************##+%#*@##**#**#**++%%====+======++===========" << endl;
	cout << "********************************************************%#**%@%#**#**##%@#%#+++=+=++++=+============" << endl;
	cout << "********************+--********************************#**%**##**##****#%*%#***++=============+=====" << endl;
	cout << "*******************--=******************************+#**#****#%***#****#*#@*#%+****++===============" << endl;
	cout << "*****************=--+*****************************+%***#*****#@%*##*****#%@%***%*****+++========+===" << endl;
	cout << "*************************************************#***%********@%#%#**%#**%**#%**##*#*****++++++++++=" << endl;
	cout << "************************************************#**%*********###**#*****%@##**##**#****#*#+++=+=+===" << endl;
	cout << "*********************************************+%****************@********%@*****##***%+*********+*+++" << endl;
	cout << "*************#%%%%%%%%%%%%%%%%%%%%%%%#******%***#***********************%%********%***%**#*******#**" << endl;
	cout << "******#%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%**%*************************%*#**#******%+++*#*#********" << endl;
	cout << "***%%%@@@@@@@@@@@@--++*#####**+--@@@@@@@@@@@@%%%***********************#@#**********#**#%#+****#****" << endl;
	cout << "@%@@@@@@%%%%@@@==*%@%%@@%#@**%@@@*+=@@@@%%%%@@@@@%%*****###*@@@@@@@%%@@@@@@@@@@@@@@@%=-=+@@@@@@@@@*#" << endl;
	cout << "@@@@%%%%%%%%#=*%%%%%%%%%%%%=#%%%%%%%*=*%%%%%%%%@@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#**%%%@%%@@@@@@" << endl;
	cout << "@@%%%%@@%@@=*@@@##%%#@@%%%%*%@@@@##%%@*=%@@@@@%%@@@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#=.:+%%@%*#%%%%%" << endl;
	cout << "@%%%%@@%@%=%@@@%@@@@@%@@%%+*@@@#@@%%%@@@++@@@@%%@@@%%%%%+%%@::@@%#-:=#%%%%%%%@%%%%%%%#++%%@@%%@@%@%@" << endl;
	cout << "@@%%%@@%%=%#%@@@@@@@%@%%%%=*@@%*%@@@@%-+%+=@@@%%@@@%##%@@@%@@@@@@@@::#%%%%%%%%%%%%%%%+:=#%%@@@@@@@@@" << endl;
	cout << "@@@@%@@@=%%@@@@%%@@%@%@@%%**@@%@@@@@@@@@%%+*@@%%@@@%%@%%%%%%%%%%%%%%%%%%%%%%%%%@@@%%%%%%%@@@@@@@@@@@" << endl;
	cout << "@@%@@@@=#@#@@%*@%#+#%@@@%***@@%@#%%@@@@@@@%=@@%@@@@%#@%%%%%%%%%%%%%%%%%%%%%%%%%%%@@@@@@@@@%%%%%%%%@@" << endl;
	cout << "@@@%@@@=#@%@@@@%%@@@@@@%%%=*@@@%@@@@@%+%@@@+=@@%%@@%@@@@@@@@@@@@@@@@@@@@@@@@@%@@@@@@@@@@@@%%@@@@@@@@" << endl;
	cout << "@@@@%%@#%@@@@%@@@@@@@%@%%%=%@@@@@@+%@@%#@@@%=@@%@@@%%%@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" << endl;
	wait(125);
	
}


bool offRoad()
{


	bool success = false; 

	char keyPressed = _getch(); 
	auto start = std::chrono::steady_clock::now();

	/*
	while (keyPressed != 'd')
	{
		if (_kbhit())
		{
			switch (_getch())
			{
			case 'w':
				//This draws the bus moving, while continously checking to see if 8 hours have passed
				
				if (!paused)
				{


					auto now = std::chrono::steady_clock::now();

					// Calculate the elapsed time in hours

					std::chrono::duration<double> elapsed = now - start;
					int hoursElapsed = static_cast<int>(elapsed.count() / 3600); // convert seconds to hours



					if (hoursElapsed > OFFROADTOTAL)
					{ // If an hour has passed
						bool result = gameOverScreen();

						if (result == true)
						{
							gameStatus = true;
							points++;
							break;
						}



					}

				}


			default:
				//what displays when nothing is pressed
				cout << "########################################################%%%%%%%%%%########%%%%%%%%%%################" << endl;
				cout << "********%%%%%%%%%%%%*%%%%%%%%%%%%%%%%%%%%%#*%%%%%%%%%%%*%@@@@@@@@@@%****#@@%@@@@@@@@***************#" << endl;
				cout << "++++++#*%%%%%%%%%%%%*%%%%%%%%%%%%%%%%%%%%%%*%%%%%%%%%%@#%@@%%@%#@@@@@@%@@@@@%%@@%@%%########*#####*#" << endl;
				cout << "@@#+=+=+%%%%%%%%%%*+***%##%%*##%#%##*%*%#+*#*%%%%%%%%%%=#@@%@%#@@@@@@@@@@@@@@%%@@%@%++===========++#" << endl;
				cout << "*=======#%%%%%%%%%#+++++++++++++++++++++++++*%%%%%%%%%#=#@%@@%@@@@@@@@@@@@@@@@@%@%@%+=============+#" << endl;
				cout << "========#%%%%%%%%%#+++++++++++++++++++++++++*%%%%%%%%%#=#@%%%%@@@@@@@@@@@@@@@@@#%%%%+=============+#" << endl;
				cout << "========*%%%%%%%%%@@@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%#*=#@@@@@@%@@@@@@@@@@@@%@@@@@@@+=============+#" << endl;
				cout << "========+#############################################*======#%@+++#*+++==++=======+=============++#" << endl;
				cout << "=============================================================#%@=+*%#++==========================++#" << endl;
				cout << "=============================================================#*%+**%%*+=================+========++#" << endl;
				cout << "+================================++++==============+++#++===+#*%+##%%%+=========================+++#" << endl;
				cout << "++++++++++++++++++++++++++++++++++***+++++++++++++++++@*+++++#*@+++%#++++++++++++++++++++++++++++++#" << endl;
				cout << "+++++++++++++++++++++++++++++*#*********++++++++++++++%#+++++#*%+++++++++++++++++++++++++++++++++++#" << endl;
				cout << "+++++++++++++++++++++++*###******=******###**+++++++++#%+++++#*%++++++*@+++++++++++++++++++++++++++#" << endl;
				cout << "+++++++++++++++++**#####******************#####**++++++@*++++#*%++++++#%+++++++++++++++++++++++++++#" << endl;
				cout << "+++++++++++***#**#*************=+************###**#*+++%*++++#*%+++++*%*+++++++++++++++++++++++++++#" << endl;
				cout << "++++++*####*####**************+=****************#######%#++++#*%+++++*@++++++++++++++++++*+++++++++#" << endl;
				cout << "#*###*##*##**************************************######%%%@%#%*%**+++#%+++++*+++++**++++++++**+++++#" << endl;
				cout << "######**********************************************##*%@*%#*%*@*+++*%*+*++++++++++++++++++++++++++#" << endl;
				cout << "*###************************==***********************###@###*%*%##**#@+++++++++++++++++*+++*+**++++#" << endl;
				cout << "***************************=-**********************##**#%%###%*@#%%%%%##**+++++++++++++++++++++++++#" << endl;
				cout << "**************************************************#**#**#%***%*%#*##%%%***+*****+++*+++++++++++++++#" << endl;
				cout << "************************************************#**##****@#**%*%***#%#**#***#*****+++++++++++++++++#" << endl;
				cout << "**********************************************##*##******%%#*%*%####@######**###**###**++++++++++++#" << endl;
				cout << "***********************=--+******************#**%********#%#*%*@*##%%#######**#*##******+**++++++++#" << endl;
				cout << "**********************+--+*****************#**#**********#%#*%*@##*%%****#####*#**#*####*#*#**+**+*#" << endl;
				cout << "***************#######*+*#####*#*********##*##************%**%*@**#@###***######*#*##**#######****+#" << endl;
				cout << "*******#%@@%@@@@@@@@@@@@@@@@@@@@@@%@%%###**#*****************%*@**#%***###**##**%*#####****#########" << endl;
				cout << "**#%@@@@@@@@@@@@@%===++++==+%@@@@@@@@@@@@%%******************%*%**%%******####*-=+#**#######*#*#####" << endl;
				cout << "@@@@@@@@@@@@@%++*#%@@@%@@@@@#*=*@@@@@@@@@@@@@%***************%*@**************%*+#**#****##**#**##*#" << endl;
				cout << "@@@@@@@@@@@#+#@*@@@@@@@@@@@@@@@@*+%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%***@@@@@@@@@@@@@@@@@#" << endl;
				cout << "@@@@@@%%%#+#@@@#*%@@%@%%@@@@@@@##%#+%@@@%@@@@@@@%%%%%%@%%%%%%%%%@@@@@@@@@@@@@@#==+%@@@@@@@@@@@@@@@@#" << endl;
				cout << "@@@@@@@@**@@@%@@%*%%@@@@@@@@@%@@@@@@**@@@@@@@@@@%%%@%#+%#@%#%%*#%%@@@@@@@%@@@@%#*#@@@@%@@@@@@@@@@@@#" << endl;
				cout << "@@@@@@+#@@@@@@@@#*%@@@@@@@@%@@@@@@*%#+@@@@@@@@@%#%@%%@%%@%%%%::%%@@@@@@@@@@@%*=:=%@@@@@@@@@@@@@@@@#" << endl;
				cout << "@@@@@@**%%@@@@@@@@#*@@%@@@@@@*#@@@@@@@**@@@@@@@%%@@%@@@@@@@@@@@@@@@@@@@@@%@@@%@@@@@@@@@@@@@@@@@@@@@#" << endl;
				cout << "%%@@@%*@##%#%@%#*#%**%%@@@@@@%@@@@@@@@@+@@@@@@@%@@%@%@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
				cout << "%@@@@+#@@@@@@%@@@@@@***#@@@@@@@@@@@@##%#+@@@@@@@%@+%@@@=%@@%+%@@@@@@@@@@@@@@@@@@@@@@@%#@@@@@@@@@@@@#" << endl;
				cout << "@@@@%+%@%@@@%@@@@@@@##**##@@@%@*#@@@@@%%+@@@@@@@@%%#@@@##@@@#*@@@@@@@@@@@@@@@@@@@@@@@@@%%%%%%%%%%%@#" << endl;
				cout << "@@@@%+@@@@@@@@@@@@@##@%@@##++++*+++++%%%+@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;
				cout << "%@@@%+@@@@%@@@@@@@@##@@@@#%%%%%@@@@@@@@@+@@@@@@@@@%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#" << endl;


			}
		}

	}











	*/






	return success; 
}

void clear() 
{
	cout << "\033[2J\033[1;1H";
}


/* << "\033[1;31mred" << endl
         << "\033[1;32mgreen" << endl
         << "\033[1;33m" << endl
         << "\033[1;34mblue" << endl
         << "\033[1;35m" << endl*/

bool titleScreen(CXBOXController* player)
{
	bool status = false; 
	int drawCount = 0; 
	//put ascii art in here later 
	while (true) 
	{
		SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 0,0 });
		CONSOLE_CURSOR_INFO info;

		info.dwSize = 100;

		info.bVisible = false;

		SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info);
		clear();
		cout << "\033[1;31m";
		cout << " _______   _______     _______. _______ .______     .___________.   .______    __    __       _______." << endl;
		cout << "|       \\ |   ____|   /       ||   ____||   _  \\    |           |   |   _  \\  |  |  |  |     /       |" << endl;
		cout << "\033[1;32m"; 
		cout << "|  .--.  ||  |__     |   (----`|  |__   |  |_)  |   `---|  |----`   |  |_)  | |  |  |  |    |   (----`" << endl;
		cout << "\033[1;33m|  |  |  ||   __|     \\   \\    |   __|  |      /        |  |        |   _  <  |  |  |  |     \\   \\    " << endl;
		cout << "\033[1;34m"; 
		cout << "|  '--'  ||  |____.----)   |   |  |____ |  |\\  \\----.   |  |        |  |_)  | |  `--'  | .----)   |   " << endl;
		cout << "\033[1;35m|_______/ |_______|_______/    |_______|| _| `._____|   |__|        |______/   \\______/  |_______/    " << endl;
		cout << "                                                                                                      " << endl;
		cout << endl << endl;

		if (drawCount == 0) {
			cout << "\033[1;33mPress enter (or start) to continue.../" << endl;
		}
		else if (drawCount == 1) {
			cout << "\033[1;33mPress enter (or start) to continue...__" << endl;
		}
		else if (drawCount == 2) {
			cout << "\033[1;33mPress enter (or start) to continue...\\" << endl;
		}
		else {
			cout << "\033[1;33mPress enter (or start) to continue...|" << endl;
		}

		wait(125);
		drawCount = (drawCount + 1) % 4;

		if (_kbhit()) 
		{
			switch (_getch()) 
			{
				//xbox controller inputs
				case XINPUT_GAMEPAD_START: 
					status = true; 
					goto quit;
				case XINPUT_GAMEPAD_A:
					status = true;
					goto quit;
				case XINPUT_GAMEPAD_BACK: 
					status = false; 
					goto quit; 
				case XINPUT_GAMEPAD_B:
					status = true;
					goto quit;
				//keyboard inputs
				case '\r':
					status = true; 
					goto quit; 
				case 27: 
					goto quit; 
					
			}
		
		
		}
	}
	quit: 
	cout << "\033[0m" << endl;
	return status; 
}

bool gameOverScreen(CXBOXController* player)
{
	int count = 0; 
	bool status = false; 
	bool gameQuitStat = false; 

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 0,0 });
	CONSOLE_CURSOR_INFO info;

	info.dwSize = 100;

	info.bVisible = false;

	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info);



	for (int i = 0; i < 13; i++) 
	{
		player->Vibrate(63358, 0);
		cout << "\033[1;31m"; 
		
		cout << "  _______      ___      .___  ___.  _______      ______   ____    ____  _______ .______      " << endl;
		cout << " /  _____|    /   \\     |   \\/   | |   ____|    /  __  \\  \\   \\  /   / |   ____||   _  \\     " << endl;
		cout << "|  |  __     /  ^  \\    |  \\  /  | |  |__      |  |  |  |  \\   \\/   /  |  |__   |  |_)  |    " << endl;
		cout << "|  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|     |  |  |  |   \\      /   |   __|  |      /     " << endl;
		cout << "|  |__| |  /  _____  \\  |  |  |  | |  |____    |  `--'  |    \\    /    |  |____ |  |\\  \\----." << endl;
		cout << " \\______| /__/     \\__\\ |__|  |__| |_______|    \\______/      \\__/     |_______|| _| `._____|" << endl;

		wait(125); 
		clear(); 
		cout << "\033[0m";

		cout << "  _______      ___      .___  ___.  _______      ______   ____    ____  _______ .______      " << endl;
		cout << " /  _____|    /   \\     |   \\/   | |   ____|    /  __  \\  \\   \\  /   / |   ____||   _  \\     " << endl;
		cout << "|  |  __     /  ^  \\    |  \\  /  | |  |__      |  |  |  |  \\   \\/   /  |  |__   |  |_)  |    " << endl;
		cout << "|  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|     |  |  |  |   \\      /   |   __|  |      /     " << endl;
		cout << "|  |__| |  /  _____  \\  |  |  |  | |  |____    |  `--'  |    \\    /    |  |____ |  |\\  \\----." << endl;
		cout << " \\______| /__/     \\__\\ |__|  |__| |_______|    \\______/      \\__/     |_______|| _| `._____|" << endl;


		wait(125); 
		clear(); 
	}

	cout << "\033[0m";
	clear();
	cout << "  _______      ___      .___  ___.  _______      ______   ____    ____  _______ .______      " << endl;
	cout << " /  _____|    /   \\     |   \\/   | |   ____|    /  __  \\  \\   \\  /   / |   ____||   _  \\     " << endl;
	cout << "|  |  __     /  ^  \\    |  \\  /  | |  |__      |  |  |  |  \\   \\/   /  |  |__   |  |_)  |    " << endl;
	cout << "|  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|     |  |  |  |   \\      /   |   __|  |      /     " << endl;
	cout << "|  |__| |  /  _____  \\  |  |  |  | |  |____    |  `--'  |    \\    /    |  |____ |  |\\  \\----." << endl;
	cout << " \\______| /__/     \\__\\ |__|  |__| |_______|    \\______/      \\__/     |_______|| _| `._____|" << endl;

	cout << endl << endl;


	cout << "\033[32m > Reset " << "                                                     " << "\033[0m Quit" << endl;

	while (true) 
	{
		
		

		if (_kbhit()) 
		{
			char ch = _getch();
			if (gameQuitStat == true && ch == '\r' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_START || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_A)
			{
				status = false;
				break;

			}
			else if (gameQuitStat == false && ch == '\r' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_START || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_A)
			{
				status = true;
				break;

			}
			
			if (ch == 'd' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_RIGHT)
			{
				cout << "\033[0m";
				clear();
				cout << "  _______      ___      .___  ___.  _______      ______   ____    ____  _______ .______      " << endl;
				cout << " /  _____|    /   \\     |   \\/   | |   ____|    /  __  \\  \\   \\  /   / |   ____||   _  \\     " << endl;
				cout << "|  |  __     /  ^  \\    |  \\  /  | |  |__      |  |  |  |  \\   \\/   /  |  |__   |  |_)  |    " << endl;
				cout << "|  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|     |  |  |  |   \\      /   |   __|  |      /     " << endl;
				cout << "|  |__| |  /  _____  \\  |  |  |  | |  |____    |  `--'  |    \\    /    |  |____ |  |\\  \\----." << endl;
				cout << " \\______| /__/     \\__\\ |__|  |__| |_______|    \\______/      \\__/     |_______|| _| `._____|" << endl;

				cout << endl << endl;
				cout << "\033[0m   Reset " << "                                                     " << "\033[32m > Quit" << endl;
				gameQuitStat = true; 

				
				
			}
			else if (ch == 'a' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_LEFT)
			{
				cout << "\033[0m";
				clear();
				cout << "  _______      ___      .___  ___.  _______      ______   ____    ____  _______ .______      " << endl;
				cout << " /  _____|    /   \\     |   \\/   | |   ____|    /  __  \\  \\   \\  /   / |   ____||   _  \\     " << endl;
				cout << "|  |  __     /  ^  \\    |  \\  /  | |  |__      |  |  |  |  \\   \\/   /  |  |__   |  |_)  |    " << endl;
				cout << "|  | |_ |   /  /_\\  \\   |  |\\/|  | |   __|     |  |  |  |   \\      /   |   __|  |      /     " << endl;
				cout << "|  |__| |  /  _____  \\  |  |  |  | |  |____    |  `--'  |    \\    /    |  |____ |  |\\  \\----." << endl;
				cout << " \\______| /__/     \\__\\ |__|  |__| |_______|    \\______/      \\__/     |_______|| _| `._____|" << endl;

				cout << endl << endl;
				cout << "\033[32m > Reset " << "                                                     " << "\033[0m Quit" << endl;
				
				gameQuitStat = false; 

			
			}


		}

		

		wait(100);

	}

	return status; 
}



void wait(int milliseconds)
{
	std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));
}

int menu(CXBOXController* player)
{
	int choice = 1; 
	

	cout << "Welcome to the Desert Bus console port! Select an option below: " << endl; 
	cout << ">\033[32m 1. New Game" << endl;
	cout << "\033[0m  2. Instructions" << endl;
	cout << "\033[0m  3. Credits" << endl;
	cout << "\033[0m  4. Quit Game" << endl;

	while (true) 
	{
		
		if (_kbhit()) {
            char ch = _getch();
            if (ch == 's' || ch == XINPUT_GAMEPAD_DPAD_DOWN) {
                choice++;
            } else if (ch == 'w' || ch == XINPUT_GAMEPAD_DPAD_UP) {
                choice--;
            } else if (ch == '\r' || ch == XINPUT_GAMEPAD_START || ch == XINPUT_GAMEPAD_A) { // Enter key to confirm choice
                return choice;
            }
			//setting it back to the first choice
			//so it can loop back around
			if (choice > 4 || choice < 1) 
			{
				choice = 1; 
			}
		}
		if (choice == 1) 
		{
			clear();
			cout << ">\033[32m 1. New Game" << endl;
			cout << "\033[0m  2. Instructions" << endl;
			cout << "\033[0m  3. Credits" << endl;
			cout << "\033[0m  4. Quit Game" << endl;
			wait(125);
			 
		}
		if (choice == 2) 
		{
			clear();
			cout << "\033[0m  1. New Game" << endl;
			cout << ">\033[32m 2. Instructions" << endl;
			cout << "\033[0m  3. Credits" << endl;
			cout << "\033[0m  4. Quit Game" << endl;
			wait(125);
		}
		if (choice == 3) 
		{
			clear();
			cout << "\033[0m  1. New Game" << endl;
			cout << "\033[0m  2. Instructions" << endl;
			cout << ">\033[32m 3. Credits" << endl;
			cout << "\033[0m  4. Quit Game" << endl;
			wait(125);
		}
		if (choice == 4)
		{
			clear();
			cout << "\033[0m  1. New Game" << endl;
			cout << "\033[0m  2. Instructions" << endl;
			cout << "\033[0m  3. Credits" << endl;
			cout << ">\033[32m 4. Quit Game" << endl;
			wait(125);
		}


	}


	return choice; 
}

void createName(string& playerName)
{
	clear(); 
	do {
		cout << "Use the keyboard to enter your name! (less than 13 characters): " << endl;
		getline(cin, playerName);
		if (playerName.length() >= NAME_SIZE)
		{
			cout << "Name not valid. Please try again." << endl;
		}



	} while (playerName.length() > NAME_SIZE);

}

void credits()
{
	cout << "The Original Desert Bus Team: " << endl; 
	cout << "Publishing: Absolute Entertainment" << endl; 
	cout << "Artist: Glen Schofield" << endl;
	cout << "Programming: Mark Morris" << endl;
	cout << "Design: " << endl;
	cout << "Barry Marx" << endl;
	cout << "Penn Jillette" << endl;
	cout << "Teller" << endl;


	cin.get();
	cin.ignore();

}

void instructions() 
{


	cin.get();
	cin.ignore();
}

void updates()
{
	cout << "Version: 0.01" << endl; 
	cout << "This is the initial release. Still working on xbox controller compatibility, and I'll release a nice looking" << endl; 
	cout << "version of this project later on. " << endl; 


	cin.get(); 
	cin.ignore(); 
}


//Make this look nicer when the rest of the project is done
bool winscreen() 
{
	int count = 0; 
	bool status = false; 
	bool gameQuitStat = false; 

	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { 0,0 });
	CONSOLE_CURSOR_INFO info;

	info.dwSize = 100;

	info.bVisible = false;

	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &info);



	for (int i = 0; i < 13; i++) 
	{
		player->Vibrate(63358, 0);
		cout << "\033[32m"; 
		
		cout << "_____.___.               __      __.__      ._.\n";
		cout << "\\__  |   | ____  __ __  /  \\    /  \\__| ____| |\n";
		cout << " /   |   |/  _ \\|  |  \\ \\   \\/\\/   /  |/    \\ |\n";
		cout << " \\____   (  <_> )  |  /  \\        /|  |   |  \\|\n";
		cout << " / ______|\\____/|____/    \\__/\\  / |__|___|  /_\n";
		cout << " \\/                            \\/          \\/\\/ \n";


		wait(125); 
		clear(); 
		cout << "\033[0m";

		cout << "_____.___.               __      __.__      ._.\n";
		cout << "\\__  |   | ____  __ __  /  \\    /  \\__| ____| |\n";
		cout << " /   |   |/  _ \\|  |  \\ \\   \\/\\/   /  |/    \\ |\n";
		cout << " \\____   (  <_> )  |  /  \\        /|  |   |  \\|\n";
		cout << " / ______|\\____/|____/    \\__/\\  / |__|___|  /_\n";
		cout << " \\/                            \\/          \\/\\/ \n";



		wait(125); 
		clear(); 
	}

	cout << "\033[0m";
	clear();
	cout << "_____.___.               __      __.__      ._.\n";
	cout << "\\__  |   | ____  __ __  /  \\    /  \\__| ____| |\n";
	cout << " /   |   |/  _ \\|  |  \\ \\   \\/\\/   /  |/    \\ |\n";
	cout << " \\____   (  <_> )  |  /  \\        /|  |   |  \\|\n";
	cout << " / ______|\\____/|____/    \\__/\\  / |__|___|  /_\n";
	cout << " \\/                            \\/          \\/\\/ \n";


	cout << endl << endl;

	cout << "You win! Do you wish to play again? " << endl; 
	cout << "\033[32m > Reset " << "                                                     " << "\033[0m Quit" << endl;

	while (true) 
	{
		
		

		if (_kbhit()) 
		{
			char ch = _getch();
			if (gameQuitStat == true && ch == '\r' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_START || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_A)
			{
				status = false;
				break;

			}
			else if (gameQuitStat == false && ch == '\r' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_START || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_A)
			{
				status = true;
				break;

			}
			
			if (ch == 'd' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_RIGHT)
			{
				cout << "\033[0m";
				clear();
				cout << "_____.___.               __      __.__      ._.\n";
				cout << "\\__  |   | ____  __ __  /  \\    /  \\__| ____| |\n";
				cout << " /   |   |/  _ \\|  |  \\ \\   \\/\\/   /  |/    \\ |\n";
				cout << " \\____   (  <_> )  |  /  \\        /|  |   |  \\|\n";
				cout << " / ______|\\____/|____/    \\__/\\  / |__|___|  /_\n";
				cout << " \\/                            \\/          \\/\\/ \n";


				cout << endl << endl;
				cout << "You win! Do you wish to play again? " << endl;
				cout << "\033[0m   Reset " << "                                                     " << "\033[32m > Quit" << endl;
				gameQuitStat = true; 

				
				
			}
			else if (ch == 'a' || player->GetState().Gamepad.wButtons & XINPUT_GAMEPAD_DPAD_LEFT)
			{
				cout << "\033[0m";
				clear();
				cout << "_____.___.               __      __.__      ._.\n";
				cout << "\\__  |   | ____  __ __  /  \\    /  \\__| ____| |\n";
				cout << " /   |   |/  _ \\|  |  \\ \\   \\/\\/   /  |/    \\ |\n";
				cout << " \\____   (  <_> )  |  /  \\        /|  |   |  \\|\n";
				cout << " / ______|\\____/|____/    \\__/\\  / |__|___|  /_\n";
				cout << " \\/                            \\/          \\/\\/ \n";


				cout << endl << endl;
				cout << "You win! Do you wish to play again? " << endl;
				cout << "\033[32m > Reset " << "                                                     " << "\033[0m Quit" << endl;
				
				gameQuitStat = false; 

			
			}


		}

		

		wait(100);

	}

	return status; 



}

void leaderBoard(int point, string name) 
{
	//put stuff in here
	int highest = 3; 
	int medium = 2; 
	int lowest = 1; 

	string highestName = "Nadia";
	string midName = "Jean"; 
	string lowName = "Marie";


	char ch = _getch(); 

	while (true)
	{
		cout << RED; 
		cout << "__________ High Score! ___________________" << endl;
		cout << "1. " << highestName << setw(15) << highest << endl;
		cout << "2." << midName << setw(15) << medium << endl;
		cout << "3." << lowName << setw(15) << lowest << endl;
		wait(500);
		clear(); 
		cout << BLUE; 
		cout << "__________ High Score! ___________________" << endl;
		cout << "1. " << highestName << setw(15) << highest << endl;
		cout << "2." << midName << setw(15) << medium << endl;
		cout << "3." << lowName << setw(15) << lowest << endl;
		wait(500);
		clear();
		cout << GREEN;
		cout << "__________ High Score! ___________________" << endl;
		cout << "1. " << highestName << setw(15) << highest << endl;
		cout << "2." << midName << setw(15) << medium << endl;
		cout << "3." << lowName << setw(15) << lowest << endl;
		wait(500);
		clear(); 
		cout << YELLOW;
		cout << "__________ High Score! ___________________" << endl;
		cout << "1. " << highestName << setw(15) << highest << endl;
		cout << "2." << midName << setw(15) << medium << endl;
		cout << "3." << lowName << setw(15) << lowest << endl;
		wait(500);
		clear();
	}
	




}